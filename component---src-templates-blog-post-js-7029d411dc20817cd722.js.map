{"version":3,"sources":["webpack:///./src/components/container.js","webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["children","className","containerStyles","container","SEO","description","lang","meta","title","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","BlogList","render","path","posts","this","props","data","allMysqlMessages","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","console","log","style","listStyle","map","node","subject","key","id_msg","to","fields","slug","role","aria-label","rel","Array","from","length","_","i","React","Component","blogListQuery"],"mappings":"6FAAA,+CAEe,oBAAGA,EAAH,EAAGA,SAAH,OACb,mBAAKC,UAAWC,IAAgBC,WAAYH,K,uZCS9C,SAASI,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,EADuC,OACvCA,KAcFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,YAAC,IAAD,CACEO,eAAgB,CACdN,QAEFE,MAAOA,EACPK,cAAa,QAAUJ,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEO,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASP,GAEX,CACEQ,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASN,EAAKE,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASP,GAEX,CACEM,KAAK,sBACLC,QAASL,IAEXQ,OAAOX,KAKfH,EAAIe,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,gQC/EMgB,E,gLACnBC,OAAA,WACE,IAAMC,EAAO,YACPC,EAAQC,KAAKC,MAAMC,KAAKC,iBAAiBC,MAFxC,EAG2BJ,KAAKC,MAAMI,YAArCC,EAHD,EAGCA,YAAaC,EAHd,EAGcA,SACfC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAYZ,EAAK,IAAIQ,EAAc,GAAM,EAAI,IAAMA,EAAc,GAAGK,YACpEC,EAAWd,EAAK,IAAKQ,EAAc,GAAGK,WAE5C,OADAE,QAAQC,IAAIR,GAEZ,YAAC,IAAD,KACE,YAAC,IAAD,CAAKtB,MAAK,qBACT,YAAC,IAAD,KACH,mDACA,mFACC,kBAAI+B,MAAO,CAAGC,UAAU,SACtBjB,EAAMkB,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJlC,EAAQkC,EAAKC,QACnB,OAAO,kBAAIC,IAAKF,EAAKG,QAAQ,YAAC,OAAD,CAAMC,GAAE,IAAMJ,EAAKK,OAAOC,MAASN,EAAKG,OAAxC,IAAiDrC,QAGnF,mBAAKP,UAAU,yBAAyBgD,KAAK,aAAaC,aAAW,eAElElB,GACA,YAAC,OAAD,CAAM/B,UAAU,kBAAkB6C,GAAIZ,EAAUiB,IAAI,QAApD,eAIAlB,GACA,YAAC,OAAD,CAAMhC,UAAU,kBAAkB6C,GAAIV,EAAUe,IAAI,QAApD,UAIF,kBAAIlD,UAAU,mBACbmD,MAAMC,KAAK,CAAEC,OAAQvB,IAAY,SAACwB,EAAGC,GAAJ,OACjC,kBAAKZ,IAAKY,GAAV,IAAc,YAAC,OAAD,CAAMvD,UAAS,oBAAqBuD,IAAM1B,EAAY,EAAG,SAAS,IAAQc,IAAG,qBAAsBY,EAAI,GAAKV,GAAKxB,EAAK,IAAY,IAANkC,EAAU,GAAKA,EAAI,IACzJA,EAAI,Y,GArCuBC,IAAMC,WAmD/BC,EAAa","file":"component---src-templates-blog-post-js-7029d411dc20817cd722.js","sourcesContent":["import React from \"react\"\r\nimport containerStyles from \"./container.module.css\"\r\nexport default ({ children }) => (\r\n  <div className={containerStyles.container}>{children}</div>\r\n)","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport Container from \"../components/container\"\r\n import SEO from \"../components/seo\"\r\nimport { Link } from \"gatsby\"\r\n// <SEO title={posts.frontmatter.title} />\r\n \r\nexport default class BlogList extends React.Component  {\r\n  render() {\r\n    const path = \"/fandubs/\";\r\n    const posts = this.props.data.allMysqlMessages.edges\r\n    const { currentPage, numPages } = this.props.pageContext\r\n    const isFirst = currentPage === 1\r\n    const isLast = currentPage === numPages\r\n    const prevPage =  path+\"\"+(currentPage - 1 === 1 ? \"\" : (currentPage - 1).toString())\r\n    const nextPage = path+\"\"+((currentPage + 1).toString())\r\n    console.log(currentPage)\r\n    return (\r\n    <Layout>\r\n      <SEO title={`Lista de fandubs`}/>\r\n       <Container>\r\n    <h1>Archivo: lista de fandubs</h1>\r\n    <p>Aquí encontrará una lista de todos los dandubs disponibles</p> \r\n     <ul style={{  listStyle: `none`}}>\r\n      {posts.map(({ node }) => {\r\n          const title = node.subject \r\n          return <li key={node.id_msg}><Link to={`/${node.fields.slug}`}>{node.id_msg} {title}</Link></li>\r\n        })}\r\n        </ul>\r\n     <nav className=\"pagination is-centered\" role=\"navigation\" aria-label=\"pagination\">\r\n     \r\n      {!isFirst && (\r\n        <Link className=\"pagination-prev\" to={prevPage} rel=\"prev\">\r\n          ← Previous\r\n        </Link>\r\n      )}\r\n      {!isLast && (\r\n        <Link className=\"pagination-next\" to={nextPage} rel=\"next\">\r\n          Next →\r\n        </Link>\r\n      )}\r\n      <ul className=\"pagination-list\">\r\n      {Array.from({ length: numPages }, (_, i) => (\r\n       <li  key={i}> <Link className={`pagination-link ${i === currentPage-1? \"active\":\"\"}`}   key={`pagination-number${i + 1}`} to={ path+\"\"+`${i === 0 ? \"\" : i + 1}`}>\r\n          {i + 1}\r\n        </Link></li>\r\n      ))}\r\n\r\n  \r\n        </ul>\r\n    </nav>\r\n     </Container>\r\n     </Layout>\r\n  )\r\n    }\r\n}\r\n\r\n\r\nexport const blogListQuery = graphql`\r\n  query mySqlblogListQuery($skip: Int!, $limit: Int!) {\r\n    allMysqlMessages(\r\n      filter: {id_member: {eq: 239}}, \r\n      limit: $limit\r\n      skip: $skip\r\n      sort: {fields: poster_time, order: ASC}\r\n\r\n      ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          body\r\n          subject\r\n          id_msg\r\n        }\r\n      }\r\n    } \r\n  }\r\n`"],"sourceRoot":""}